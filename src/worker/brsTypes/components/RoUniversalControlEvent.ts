import {
    BrsType,
    BrsValue,
    ValueKind,
    BrsString,
    BrsBoolean,
    Int32,
    Callable,
    Comparable,
    isNumberComp,
} from "..";
import { BrsComponent } from "./BrsComponent";
import { Interpreter } from "../../interpreter";
export interface KeyEvent {
    remote: string; // Remote Id (Remote Type:Remote Index)
    key: number; // Key Code
    mod: number; // Modifier (0 = press, 100 = release)
}

export class RoUniversalControlEvent extends BrsComponent implements BrsValue, Comparable {
    readonly kind = ValueKind.Object;
    private event: KeyEvent;
    constructor(keyEvent: KeyEvent) {
        super("roUniversalControlEvent");
        this.event = keyEvent;

        this.registerMethods({
            ifUniversalControlEvent: [
                this.getKey,
                this.getRemoteID,
                this.getID,
                this.isPress,
                this.getChar,
            ],
            ifInt: [this.getInt],
        });
    }

    toString(parent?: BrsType): string {
        return this.event.key.toString();
    }

    getValue(): number {
        return this.event.key;
    }

    lessThan(other: BrsType): BrsBoolean {
        if (other.kind === ValueKind.Int64) {
            return BrsBoolean.from(this.getValue() < other.getValue().toNumber());
        } else if (isNumberComp(other)) {
            return BrsBoolean.from(this.getValue() < other.getValue());
        }
        return BrsBoolean.False;
    }

    greaterThan(other: BrsType): BrsBoolean {
        if (other.kind === ValueKind.Int64) {
            return BrsBoolean.from(this.getValue() > other.getValue().toNumber());
        } else if (isNumberComp(other)) {
            return BrsBoolean.from(this.getValue() > other.getValue());
        }
        return BrsBoolean.False;
    }

    equalTo(other: BrsType): BrsBoolean {
        if (other.kind === ValueKind.Int64) {
            return BrsBoolean.from(this.getValue() === other.getValue().toNumber());
        } else if (isNumberComp(other)) {
            return BrsBoolean.from(this.getValue() === other.getValue());
        }
        return BrsBoolean.False;
    }

    /** Returns an integer representing pressed or released keys on the remote. */
    private getInt = new Callable("getInt", {
        signature: {
            args: [],
            returns: ValueKind.Int32,
        },
        impl: (_: Interpreter) => {
            return new Int32(this.event.key);
        },
    });

    /** Returns the ID of the remote button that generated an event. */
    private getKey = new Callable("getKey", {
        signature: {
            args: [],
            returns: ValueKind.Int32,
        },
        impl: (_: Interpreter) => {
            let id = this.event.key - this.event.mod;
            if (id >= 32) {
                id = 0;
            }
            return new Int32(id);
        },
    });

    /** Returns the ID of the remote button or character value represented by the event. */
    private getID = new Callable("getID", {
        signature: {
            args: [],
            returns: ValueKind.Int32,
        },
        impl: (_: Interpreter) => {
            return new Int32(this.event.key - this.event.mod);
        },
    });

    /** Returns an identifier associated with the type and ID of the remote control that generated the event. */
    private getRemoteID = new Callable("getRemoteID", {
        signature: {
            args: [],
            returns: ValueKind.String,
        },
        impl: (_: Interpreter) => {
            return new BrsString(this.event.remote);
        },
    });

    /** Returns the Unicode character value generated by a keyboard key press event. */
    private getChar = new Callable("getChar", {
        signature: {
            args: [],
            returns: ValueKind.Int32,
        },
        impl: (_: Interpreter) => {
            let char = this.event.key - this.event.mod;
            if (char < 32) {
                char = 0;
            }
            return new Int32(char);
        },
    });

    /** Returns true if there is a press event; false otherwise. */
    private isPress = new Callable("isPress", {
        signature: {
            args: [],
            returns: ValueKind.Boolean,
        },
        impl: (_: Interpreter) => {
            return BrsBoolean.from(this.event.mod < 100);
        },
    });
}
