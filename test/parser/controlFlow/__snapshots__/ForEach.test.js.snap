// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`parser foreach loops allows 'next' to terminate loop 1`] = `
[
  ForEach {
    "body": Block {
      "location": {
        "end": {
          "column": -9,
          "line": -9,
        },
        "file": undefined,
        "start": {
          "column": -9,
          "line": -9,
        },
      },
      "statements": [],
    },
    "item": {
      "isReserved": false,
      "kind": "Identifier",
      "literal": undefined,
      "location": {
        "end": {
          "column": -9,
          "line": -9,
        },
        "start": {
          "column": -9,
          "line": -9,
        },
      },
      "text": "word",
    },
    "target": Variable {
      "name": {
        "isReserved": false,
        "kind": "Identifier",
        "literal": undefined,
        "location": {
          "end": {
            "column": -9,
            "line": -9,
          },
          "start": {
            "column": -9,
            "line": -9,
          },
        },
        "text": "lipsum",
      },
    },
    "tokens": {
      "endFor": {
        "isReserved": true,
        "kind": "Next",
        "literal": undefined,
        "location": {
          "end": {
            "column": -9,
            "line": -9,
          },
          "start": {
            "column": -9,
            "line": -9,
          },
        },
        "text": "next",
      },
      "forEach": {
        "isReserved": false,
        "kind": "ForEach",
        "literal": undefined,
        "location": {
          "end": {
            "column": -9,
            "line": -9,
          },
          "start": {
            "column": -9,
            "line": -9,
          },
        },
        "text": "for each",
      },
      "in": {
        "isReserved": false,
        "kind": "Identifier",
        "literal": undefined,
        "location": {
          "end": {
            "column": -9,
            "line": -9,
          },
          "start": {
            "column": -9,
            "line": -9,
          },
        },
        "text": "in",
      },
    },
  },
]
`;

exports[`parser foreach loops requires a name and target 1`] = `
[
  ForEach {
    "body": Block {
      "location": {
        "end": {
          "column": -9,
          "line": -9,
        },
        "file": undefined,
        "start": {
          "column": -9,
          "line": -9,
        },
      },
      "statements": [],
    },
    "item": {
      "isReserved": false,
      "kind": "Identifier",
      "literal": undefined,
      "location": {
        "end": {
          "column": -9,
          "line": -9,
        },
        "start": {
          "column": -9,
          "line": -9,
        },
      },
      "text": "word",
    },
    "target": Variable {
      "name": {
        "isReserved": false,
        "kind": "Identifier",
        "literal": undefined,
        "location": {
          "end": {
            "column": -9,
            "line": -9,
          },
          "start": {
            "column": -9,
            "line": -9,
          },
        },
        "text": "lipsum",
      },
    },
    "tokens": {
      "endFor": {
        "isReserved": false,
        "kind": "EndFor",
        "literal": undefined,
        "location": {
          "end": {
            "column": -9,
            "line": -9,
          },
          "start": {
            "column": -9,
            "line": -9,
          },
        },
        "text": "end for",
      },
      "forEach": {
        "isReserved": false,
        "kind": "ForEach",
        "literal": undefined,
        "location": {
          "end": {
            "column": -9,
            "line": -9,
          },
          "start": {
            "column": -9,
            "line": -9,
          },
        },
        "text": "for each",
      },
      "in": {
        "isReserved": false,
        "kind": "Identifier",
        "literal": undefined,
        "location": {
          "end": {
            "column": -9,
            "line": -9,
          },
          "start": {
            "column": -9,
            "line": -9,
          },
        },
        "text": "in",
      },
    },
  },
]
`;
